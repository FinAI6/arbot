name: Build and Deploy Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git-revision-date-localized plugin

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-docs-${{ hashFiles('**/requirements-docs.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-docs-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs-material
          pip install mkdocs-git-revision-date-localized-plugin
          pip install mkdocs-minify-plugin
          pip install mkdocs-redirects
          
          # Create requirements-docs.txt for future caching
          pip freeze | grep -E "(mkdocs|markdown)" > requirements-docs.txt

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Build documentation
        run: |
          mkdocs build --clean --strict
          
          # Add .nojekyll to prevent GitHub Pages from processing with Jekyll
          touch site/.nojekyll
          
          # Create custom 404 page if it doesn't exist
          if [ ! -f site/404.html ]; then
            echo "Creating custom 404 page..."
            cat > site/404.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <title>Page Not Found - ArBot Documentation</title>
              <meta http-equiv="refresh" content="3;url=/">
              <style>
                  body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                  .container { max-width: 500px; margin: 0 auto; }
                  h1 { color: #2196F3; }
                  p { color: #666; }
                  a { color: #2196F3; text-decoration: none; }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>404 - Page Not Found</h1>
                  <p>The page you're looking for doesn't exist.</p>
                  <p>You'll be redirected to the <a href="/">homepage</a> in 3 seconds.</p>
                  <p>Or visit our <a href="/arbot/">ArBot Documentation</a> directly.</p>
              </div>
          </body>
          </html>
          EOF
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # Optional: Validate links and check for broken documentation
  validate:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs-material mkdocs-git-revision-date-localized-plugin
          pip install linkchecker

      - name: Download built site
        uses: actions/download-artifact@v3
        with:
          name: github-pages
          path: ./site-artifact

      - name: Extract site
        run: |
          cd site-artifact
          tar -xf artifact.tar
          cd ..

      - name: Start local server for link checking
        run: |
          cd site-artifact
          python -m http.server 8000 &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          sleep 5

      - name: Check internal links
        run: |
          # Check for common issues in documentation
          echo "Checking for broken internal links..."
          linkchecker --check-extern http://localhost:8000 || true
          
          # Check for common markdown issues
          echo "Checking for markdown formatting issues..."
          find docs -name "*.md" -exec grep -l "](.*\.md)" {} \; | while read file; do
            echo "Checking relative links in $file"
            grep -n "](.*\.md)" "$file" || true
          done

      - name: Cleanup
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi